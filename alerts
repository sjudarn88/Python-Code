#!/usr/bin/python

import snowflake.connector
import os
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives.asymmetric import dsa
from cryptography.hazmat.primitives import serialization
import boto3
import json
import sys
import traceback
from datetime import datetime, timedelta
from slackclient import SlackClient

def slack_msg(msg):
    slack_client = SlackClient('xoxb-3415402561-600609616068-U2MZUnOBiYN0flY6iF9FbEVd')
    slack_client.api_call("chat.postMessage", channel='#e2e-alerts', text=msg, username='monitor-bot')
    
    return

def load_upcode_list(fname):
    ret_val = []
    for line in open(fname, 'rt'):
        if line.startswith('UP-'):
            ret_val.append(line.strip())
            
    return ret_val

def extract_upcode_dict():
    ret_val = dict()
    ssm = boto3.client('ssm', region_name='us-west-2')
    done = False
    next_token = ''
    while not done:
        if next_token == '':
            resp = ssm.get_parameters_by_path(Path='/pos/campaign/merchants/')
        else:
            resp = ssm.get_parameters_by_path(Path='/pos/campaign/merchants/', NextToken=next_token)
        if 'NextToken' in resp:
            next_token = resp['NextToken']
            if len(next_token) == 0:
                done = True
        else:
            done = True
            
        for item in resp['Parameters']:
            name = item['Name']
            value = item['Value']
            name_split = name.split('/')
            if len(name_split) != 5:
                continue
            upcode = name_split[4]
            if not upcode.startswith('UP-'):
                continue
            config = json.loads(value)
            if 'enable?' in config:
                if config['enable?']:
                    ret_val[upcode] = {'alarm':True, 'name':config['name'], 'window': 24}
        
    return ret_val

def connect_to_snowflake():
    ssm = boto3.client('ssm', region_name='us-west-2')
    priv_key = ssm.get_parameter(Name='/datapipe/prod/snowflake/pub_key')
    passphrase = ssm.get_parameter(Name='/datapipe/prod/snowflake/pk_phrase')

    p_key = serialization.load_pem_private_key(
        str(priv_key['Parameter']['Value']),
        password=str(passphrase['Parameter']['Value']),
        backend=default_backend())

    pkb = p_key.private_bytes(
        encoding=serialization.Encoding.DER,
        format=serialization.PrivateFormat.PKCS8,
        encryption_algorithm=serialization.NoEncryption())

    ctx = snowflake.connector.connect(
        user='kasapipe',
        account='ag94142',
        private_key=pkb)
    return ctx

def system_monitor():
    now_24hr = datetime.now() - timedelta(hours=24)
    now_6hr = datetime.now() - timedelta(hours=6)
    lookback_24 = now_24hr.strftime("%Y-%m-%d-%H")
    lookback_6 = now_6hr.strftime("%Y-%m-%d-%H")

    upcode_filter = load_upcode_list('./upcode-filter.txt')
    upcode_6hrwin = load_upcode_list('./upcode-6hr-win.txt')
    upcode_list = extract_upcode_dict()

    for item in upcode_filter:
        if item in upcode_list:
            upcode_list[item]['alarm'] = False
            
    for k, v in upcode_list.iteritems():
        if k in upcode_6hrwin:
            v['window'] = 6

    con = connect_to_snowflake()
    cs = con.cursor()

    role = "kasadatapipe_role" #"sysadmin" #kasadatapipe_role
    db = "production_db" #"uplift_test_db"
    schema = "public"
    warehouse = "kasa_wh"

    try:
        query = "use role "+ role +";"
        cs.execute(query)

        query = "use " + db + ";"
        cs.execute(query)

        query = "use schema " + schema + ";"
        cs.execute(query)

        query = "use warehouse " + warehouse + ";"
        cs.execute(query)

        query = "select upcode, partner, sum(total_application_count), sum(approved_application_count), sum(loan_count), sum(wex_created_loans), sum(wex_authed_loans) from hourly_metrics where hour > \'{0}\' group by upcode, partner".format(lookback_24)
        result = cs.execute(query)

        all_msgs = ''
        for (upcode, partner, total_application_count, approved_application_count, loan_count, wex_created_loans, wex_authed_loans) in result:
            if upcode in upcode_6hrwin:
                continue
            if upcode in upcode_list:
                upcode_list[upcode]['alarm'] = False
            else:
                print('found upcode not in master list: ' + upcode)
            alert_msg = ''
            if total_application_count == 0:
                alert_msg = ' no applications'
            elif approved_application_count == 0:
                alert_msg = ' no approved applications'
            elif loan_count == 0:
                alert_msg = alert_msg + ' - no loans'
            elif wex_created_loans == 0:
                alert_msg = alert_msg + ' - no wex cards created'
            elif wex_authed_loans == 0:
                alert_msg = alert_msg + ' - no wex cards authed'

            if len(alert_msg) > 0:
                all_msgs = all_msgs + upcode + ' - ' + partner + alert_msg + ' - 24hr lookback\n'
                    
        query = "select upcode, partner, sum(total_application_count), sum(approved_application_count), sum(loan_count), sum(wex_created_loans), sum(wex_authed_loans) from hourly_metrics where hour > \'{0}\' group by upcode, partner".format(lookback_6)
        result = cs.execute(query)

        for (upcode, partner, total_application_count, approved_application_count, loan_count, wex_created_loans, wex_authed_loans) in result:
            if upcode not in upcode_6hrwin:
                continue
            if upcode in upcode_list:
                upcode_list[upcode]['alarm'] = False
            else:
                print('found upcode not in master list: ' + upcode)
            alert_msg = ''
            if total_application_count == 0:
                alert_msg = ' no applications'
            elif approved_application_count == 0:
                alert_msg = ' no approved applications'
            elif loan_count == 0:
                alert_msg = alert_msg + ' - no loans'
            elif wex_created_loans == 0:
                alert_msg = alert_msg + 'no wex cards created'
            elif wex_authed_loans == 0:
                alert_msg = alert_msg + 'no wex cards authed'

            if len(alert_msg) > 0:
                all_msgs = all_msgs + upcode + ' - ' + partner + alert_msg + ' - 6hr lookback\n'
                    
        for k, v in upcode_list.iteritems():
            if v['alarm']:
                all_msgs = all_msgs + k + ' - ' + v['name'] + ' - no activity\n'

        print(all_msgs)
        slack_msg(all_msgs)
    except:
        print('Exception. Rollback')
        cs.execute('rollback')
        print(traceback.print_exc())

    finally:
        cs.close()

if __name__ == "__main__":
    system_monitor()

def lambda_handler(event, context):
    system_monitor()
Collapse
