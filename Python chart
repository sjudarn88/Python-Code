# The titanic project

#import libraries
import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import datetime as dt

#read data
os.getcwd()
train_data=pd.read_csv('titanic/train.csv',index_col='PassengerId')
test_data=pd.read_csv('titanic/test.csv',index_col='PassengerId')
gender_data=pd.read_csv('titanic/gender_submission.csv')

numeric_features=['Age','Fare']
ordinal_features=['Pclass','SibSp','Parch']
nominal_features=['Sex','Embarked']
train_data['target_name']=train_data['Survived'].map({0:'Not Survived',1:'Survived'})

#plot numeric features
#Four graph are plotted:
#1st plot distribution of columns
#2nd plot distribution of columns by groups
#3rd plot average value between different groups
#4th plot outlier for different groups
for column in numeric_features:
    #Figure initiation
    fig=plt.figure(figsize=(18,12))
    #Distribution plot
    sns.distplot(train_data[column].dropna(),ax=plt.subplot(221))
    plt.xlabel(column,fontsize=14)
    plt.ylabel('density',fontsize=14)
    plt.suptitle('Plots for '+column,fontsize=18)
    #Distribution per Survived/ Not Survived Value
    sns.distplot(train_data.loc[train_data.Survived==0,column].dropna(),
                color='red',label='Not Survived',ax=plt.subplot(222))
    sns.distplot(train_data.loc[train_data.Survived==1,column].dropna(),
                 color='blue',label='Survived',ax=plt.subplot(222))
    plt.legend(loc='best')
    plt.xlabel(column,fontsize=14)
    plt.ylabel('Density per Survived/ Not Survived Value',fontsize=14)
    #Average column value per Survived/Not survivd value
    sns.barplot(x='target_name',y=column,data=train_data,ax=plt.subplot(223))
    plt.xlabel('Survived or Not Survived?',fontsize=14)
    plt.ylabel('Average '+column,fontsize=14)
    #Boxplot of column per survived/ not survived value
    sns.boxplot(x='target_name',y=column,data=train_data,ax=plt.subplot(224))
    plt.xlabel('Survived or not survived?',fontsize=14)
    plt.ylabel(column,fontsize=14)
    plt.show()

###Plot categorical features
for column in ordinal_features:
    fig=plt.figure(figsize=(18,18))
    #average column value per Survived/ Not Survived Value
    sns.barplot(x='target_name',y=column,data=train_data,ax=plt.subplot(321))
    plt.xlabel('Survived or Not Survived?',fontsize=14)
    plt.ylabel('Average '+column,fontsize=14)
    plt.suptitle('Plots for '+column,fontsize=18)
    #boxplot of column per Survived/ Not Survived Value
    sns.boxplot('target_name',y=column,data=train_data,ax=plt.subplot(322))
    plt.xlabel('Survived or Not Survived?',fontsize=14)
    plt.ylabel(column,fontsize=14)

    #number of occurances per category
    ax=sns.countplot(x=column,hue='target_name',data=train_data,ax=plt.subplot(312))
    plt.xlabel(column,fontsize=14)
    plt.ylabel('Number of occurences',fontsize=14)
    plt.legend(loc=1)

    #adding percents over bars
    height=[p.get_height() if p.get_height()==p.get_height() else 0 for p in ax.patches]
    ncol=int(len(height)/2)
    total=[height[i]+height[i+ncol] for i in range(ncol)]*2
    for i,p in enumerate(ax.patches):
        ax.test(p.get_x()+p.get_width()/2,height[i]*1.01+10,'{:1.0%}'.format(height[i]/total[i]),ha='center',size=14)

    ###Survived percentage for every value of feature
    sns.pointplot(x=column,y='Survived',data=train_data,ax=plt.subplot(313))
    plt.xlabel(column,fontsize=14)
    plt.ylabel('Survived Percentage',fontsize=14)
    plt.show()
