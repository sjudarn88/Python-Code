### The titanic project

#import libraries
import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import datetime as dt

#read data
os.getcwd()
train_data=pd.read_csv('titanic/train.csv',index_col='PassengerId')
test_data=pd.read_csv('titanic/test.csv',index_col='PassengerId')
gender_data=pd.read_csv('titanic/gender_submission.csv')

numeric_features=['Age','Fare']
ordinal_features=['Pclass','SibSp','Parch']
nominal_features=['Sex','Embarked']
train_data['target_name']=train_data['Survived'].map({0:'Not Survived',1:'Survived'})

#plot numeric features
#Four graph are plotted:
#1st plot distribution of columns
#2nd plot distribution of columns by groups
#3rd plot average value between different groups
#4th plot outlier for different groups

ft=14
ptitle='Survived or not survived?'

for column in numeric_features:
    #Figure initiation
    fig=plt.figure(figsize=(18,12))
    #Distribution plot
    sns.distplot(train_data[column].dropna(),ax=plt.subplot(221))
    plt.xlabel(column,fontsize=ft)
    plt.ylabel('density',fontsize=ft)
    plt.suptitle('Plots for '+column,fontsize=18)
    
    #Distribution per Survived/ Not Survived Value
    sns.distplot(train_data.loc[train_data.Survived==0,column].dropna(),
                color='red',label='Not Survived',ax=plt.subplot(222))
    sns.distplot(train_data.loc[train_data.Survived==1,column].dropna(),
                 color='blue',label='Survived',ax=plt.subplot(222))
    plt.legend(loc='best')
    plt.xlabel(column,fontsize=ft)
    plt.ylabel('Density per ' + ptitle,fontsize=ft)
    
    #Average column value per Survived/Not survivd value
    sns.barplot(x='target_name',y=column,data=train_data,ax=plt.subplot(223))
    plt.xlabel(ptitle,fontsize=ft)
    plt.ylabel('Average '+column,fontsize=ft)
    
    #Boxplot of column per survived/ not survived value
    sns.boxplot(x='target_name',y=column,data=train_data,ax=plt.subplot(224))
    plt.xlabel(ptitle,fontsize=ft)
    plt.ylabel(column,fontsize=ft)
    plt.show()

###Plot categorical features
for column in ordinal_features:
    fig=plt.figure(figsize=(18,18))
    #average column value per Survived/ Not Survived Value
    sns.barplot(x='target_name',y=column,data=train_data,ax=plt.subplot(321))
    plt.xlabel(ptitle,fontsize=ft)
    plt.ylabel('Average '+column,fontsize=ft)
    plt.suptitle('Plots for '+column,fontsize=18)
    
    #boxplot of column per Survived/ Not Survived Value
    sns.boxplot('target_name',y=column,data=train_data,ax=plt.subplot(322))
    plt.xlabel(ptitle,fontsize=ft)
    plt.ylabel(column,fontsize=ft)

    #number of occurances per category
    ax=sns.countplot(x=column,hue='target_name',data=train_data,ax=plt.subplot(312))
    plt.xlabel(column,fontsize=ft)
    plt.ylabel('Number of occurences',fontsize=ft)
    plt.legend(loc='upper right')

    #adding percents over bars
    height=[p.get_height() if p.get_height()==p.get_height() else 0 for p in ax.patches]
    ncol=int(len(height)/2)
    total=[height[i]+height[i+ncol] for i in range(ncol)]*2
    for i,p in enumerate(ax.patches):
        ax.test(p.get_x()+p.get_width()/2,height[i]*1.01+10,'{:1.0%}'.format(height[i]/total[i]),ha='center',size=14)

    ###Survived percentage for every value of feature
    sns.pointplot(x=column,y='Survived',data=train_data,ax=plt.subplot(313))
    plt.xlabel(column,fontsize=14)
    plt.ylabel('Survived Percentage',fontsize=14)
    
for column in nominal_features:
    fig=plt.figure(figsize=(18,12))

    #Number of occurrences per category
    ax=sns.countplot(x=column,hue='target_name',data=train_data,ax=plt.subplot(211))
    plt.xlabel(column,fontsize=ft)
    plt.ylabel('Number of occurrences',fontsize=ft)
    plt.suptitle('Plots for '+ column,fontsize=18)
    plt.legend(loc=1)
    #add percents over bars
    height=[p.get_height() for p in ax.patches]
    ncol=int(len(height)/2)
    total=[height[i]+height[i+ncol] for i in range(ncol)]*2
    for i,p in enumerate(ax.patches):
        ax.text(p.get_x()+p.get_width()/2,height[i]*1.01+10,'{:1.0%}'.format(float(height[i])/total[i]),ha='center',size=14)

    #Survived percentage for every value of feature
    sns.pointplot(x=column,y='Survived',data=train_data,ax=plt.subplot(212))
    plt.xlabel(column,fontsize=14)
    plt.ylabel('Survived Percentage',fontsize=14)
    plt.show()

#############
grouped=df1.iloc[::,4:8].sort_values(by=['div_ln_cls','wk_nbr']).groupby('div_ln_cls')
ncols=2
nrows=int(np.ceil(grouped.ngroups/ncols))

for key,group in grouped:
    plt.scatter(group['log_UNITS'],group['log_price'])
    plt.show()
    break
    
fig = plt.figure()
fig.subplots_adjust(hspace=0.1, wspace=0.1)
i=0
for key,group in grouped:
    i+=1
    ax = fig.add_subplot(10, 3, i)
    ax.scatter(group['log_UNITS'],group['log_price'])
#############
    ###Explanation
    #subplot(nrows, ncols, index, **kwargs)： subplot(2, 2, 1) and subplot(221) both create an Axes at the top left corner of the 
    #current figure, occupying half of the figure height and half of the figure width.Row 2 and column 2 grid, 1st graph. If ax=subplot() 
    #is the same, then graphic will overlap.
    
    #legend() loc :identify the location putting the legend,eg: best, center left,lower center
    
    #get_height(),get_x(),get_width():getting bar height, starting pos and width of the graph. 
    #height[i]/total[i] is calculating the percentage og the bar value to the group total value.
    
    #if division is int by int, use float() to transform one of them into float
    
  
from os import path
data = numpy.array(Data_EMG)                 # convert complete dataset into numpy-array
x = pylab.linspace(EMG_start, EMG_stop, Amount_samples) # doesn´t change in loop anyway

outpath = "path/of/your/folder/"

fig, ax = plt.subplots()        # generate figure with axes
image, = ax.plot(x,data[0])     # initialize plot
ax.xlabel('Time(ms)')
ax.ylabel('EMG voltage(microV)')
plt.draw()
fig.savefig(path.join(outpath,"dataname_0.png")

for i in range(1, len(data)):
    image.set_data(x,data[i])
    plt.draw()
    fig.savefig(path.join(outpath,"dataname_{0}.png".format(i))
    

import matplotlib.backends.backend_pdf
pdf = matplotlib.backends.backend_pdf.PdfPages("output.pdf")
for fig in xrange(1, figure().number): ## will open an empty extra figure :(
    pdf.savefig( fig )
pdf.close()
